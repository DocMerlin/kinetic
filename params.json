{
  "name": "Kinetic",
  "tagline": "High-Performance AWS Kinesis Client for Go ",
  "body": "[![GoDoc](https://godoc.org/github.com/rewardStyle/kinetic?status.svg)](https://godoc.org/github.com/rewardStyle/kinetic)\r\n[![Circle CI](https://circleci.com/gh/rewardStyle/kinetic/tree/master.svg?style=svg&circle-token=8c8b6e0cca0f0fde6ec41b4e02329c406f74a446)](https://circleci.com/gh/rewardStyle/kinetic/tree/master)\r\n\r\n# kinetic\r\nKinetic is an MIT-licensed high-performance AWS Kinesis Client for Go\r\n\r\nKinetic wraps [sendgridlabs go-kinesis library](https://github.com/sendgridlabs/go-kinesis) to provide maximum throughput for AWS Kinesis producers and consumers.\r\nAn instance of a Kinetic listener/producer is meant to be used for each shard, so please use it accordingly. If you use more than one instance per-shard then you will\r\nhit the AWS Kinesis throughput [limits](http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html).\r\n\r\n### Getting Started\r\nBefore using kinetic, you should make sure you have a created a Kinesis stream and your configuration file has the credentails necessary to read and write to the stream. Once this stream exists in AWS, kinetic will ensure it is in the \"ACTIVE\" state before running.\r\n\r\n\r\n## Testing\r\nTests are written using [goconvey](http://goconvey.co/) and [kinesalite](https://github.com/mhart/kinesalite). Make sure you have kinesalite running locally before attempting to run the tests. They can be run either via the comamnd line:\r\n\r\n```sh\r\n$ go test -v -cover -race\r\n```\r\n\r\nor via web interface:\r\n\r\n```sh\r\n$ goconvey\r\n```\r\n\r\n## Running\r\nKinetic can be used to interface with kinesis like so:\r\n\r\n\r\n```go\r\nimport \"github.com/rewardStyle/kinetic\"\r\n\r\n// Use configuration in /etc/kinetic.conf\r\nlistener, _ := new(kinetic.Listener).Init()\r\n\r\n// Use custom configuration\r\nproducer, _ := new(kinetic.Producer).InitC(\"your-stream\", \"0\", \"shard-type\", \"accesskey\", \"secretkey\", \"region\", 10)\r\n\r\nproducer.Send(new(kinetic.Message).Init([]byte(`{\"foo\":\"bar\"}`), \"test\"))\r\n\r\n// Using Retrieve\r\nmsg, err := listener.Retrieve()\r\nif err != nil {\r\n    println(err)\r\n}\r\n\r\nprintln(string(msg))\r\n\r\n// Using Listen - will block unless sent in goroutine\r\ngo listener.Listen(func(msg []byte, wg *sync.WaitGroup) {\r\n    println(string(msg))\r\n    wg.Done()\r\n})\r\n\r\nproducer.Send(new(KinesisMessage).Init([]byte(`{\"foo\":\"bar\"}`), \"test\"))\r\n\r\nlistener.Close()\r\nproducer.Close()\r\n\r\n// Or with Kinesis Firehose\r\nfirehose, err := new(kinetic.Producer).Firehose()\r\nif err != nil {\r\n    println(err)\r\n}\r\n\r\nfirehose.Send(new(KinesisMessage).Init([]byte(`{\"foo\":\"bar\"}`), \"test\"))\r\n\r\nfirehose.Close()\r\n\r\n```\r\n\r\nFor more examples take a look at the tests. API documentation can be found [here](https://godoc.org/github.com/rewardStyle/kinetic).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}